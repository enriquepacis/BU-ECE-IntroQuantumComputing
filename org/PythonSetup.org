# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+startup: overview indent auto-fill
#+export_file_name: ../html/PythonSetup.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

#+title: Python Setup
#+author: Dr. E.P. Blair



* Direnv Setup and Python Environment                              :noexport:

** A Sample =.envrc= File

This file may be tangled using =C-u C-c C-v t=:
#+begin_src bash :padline none :tangle "./.envrc"
# Activate Python virtual environment
#   If it doesn't exist, this createa virtual env
#   in ./.direnv/python-3.11/
layout python

# Specify Python version if required (optional)
# layout python <python_version>

# Automatically add project's src folder to PYTHONPATH
# This may not be neccessary
export PYTHONPATH=$PWD/src:$PYTHONPATH

# Load environment variables from a .env file, if it exists
if [[ -f .env ]]; then
  dotenv
fi

# Additional Zsh-specific configurations (if any)
# Example: Zsh-specific exports or aliases
export ZSH_ENV_VAR="SomeValue"

#+end_src



#+begin_src emacs-lisp :eval never
(setq-local org-babel-python-command "/path/to/envname/bin/python3")
#+end_src


* Installing Python

** Background
- The objective here is to install a verion of Python and to create a virtual
  environment.
*** Virtual Environments
- You can use Python /without/ virtual environments, but things can get messy
  quickly
  - We typically add Python packages to extend its capabilities
  - Sometimes, different projects require different packages
    - Packages may conflict, or different projects may even require /different/
      versions of the same package, or even different versions of Python
    - Example: Suppose Project A requires packages W, U, and V, but Project B requires
      packages V, X, and Y. Some conflicts that can arise:
      - Package X may be incompatible with package U, rendering your code for
        Project A unusable. Remove package U, and you can no longer work on
        Project B
      - Project A and Project B might require different versions of package V
      - Project A and Project B might require different versions of Python
- To prevent such conflicts, it is customary to use *virtual environments*
  - A virtual environment is like a custom installation of Python with only those
    packages required for a specific project or application

*** Creating and Using Virtual Environments
- There are multiple ways to create virtual environments
  - Use the standard Python approach
    - Create virtual environments for Python versions previously installed on
      your computer
    - Advantages of the standard Python approach:
      - Access to the latest packages from [[https://pypi.org][pip]] utility
  - Use Conda
    - Conda creates and manages *environments*, which are similar to virtual
      environments, with some improvements
      - Added flexibility. You can create virtual environments that use Python
        versions not yet installed on your computer
      - Use the ~conda~ utility to manage environments, add/remove packages, etc.
      - Environments are journaled, so that you can return to a previous version
        of your environment
        - This is useful if you install package Y, but it conflicts with other
          packages in your environment
        - You can simply restore your environment to an earlier version
    - Drawbacks
      - Packages on [[https://conda-forge.org][conda-forge]], the package repository for ~conda~ may not be up to
        date with the ones on PyPI, the repository for standard Python packages
        - You can still install packages from PyPI in ~conda~ environments, however
*** Benefits of Using Python Virtual Environments

**** Why Use Virtual Environments in Python?
***** Isolation of Dependencies
- Avoid conflicts between package versions required by different projects.
- Each project can have its own dependencies without interfering with others.

***** Consistency Across Environments
- Reproduce the same environment for development, testing, and production.
- Ensure compatibility and avoid "it works on my machine" problems.

***** Simplified Dependency Management
- Install project-specific packages without requiring administrative privileges.
- Cleanly manage updates or removals of packages for a single project.

***** Protection of Global Python Environment
- Prevent unintended modifications to the global Python environment.
- Avoid accidental installation of packages that could affect other projects.

***** Flexibility with Python Versions
- Use different Python versions for different projects.
- Test projects under multiple Python versions without conflicts.

***** Integration with Development Tools
- Tools like Jupyter, nbgrader, and linters work seamlessly with the virtual environment.
- Specific configurations (e.g., pylint, mypy) can be tied to the project environment.

***** Ease of Collaboration
- Use a `requirements.txt` or `pyproject.toml` file to share the exact environment with team members.
- Simplifies onboarding for new collaborators.

***** Best Practices
- Always activate the virtual environment when working on the project.
- Use tools like `venv`, `virtualenv`, or `conda` to create and manage environments.
- Leverage environment management tools like `direnv` for seamless activation.
** Procedure
*** Overview

We provides some guidance on installing Python.

#+begin_note
If you're a student in one of my courses, please make sure you install the
correct release of Python, as listed in Table [[tab:PyVersion]].

#+name: tab:PyVersion
#+caption: Python versions for various courses.
|------+----------+-------------------+---------|
| Year | Semester | Course            | Release |
|------+----------+-------------------+---------|
| 2025 | Spring   | Quantum Computing |    3.11 |
|------+----------+-------------------+---------|
| 2024 | Spring   | Quantum Computing |    3.10 |
|------+----------+-------------------+---------|
#+end_note

There are two ways I suggest for installing Python:
1. Using [[https://anaconda.org][Anaconda]]
2. Using standard Python from [[https://www.python.org/downloads/][python.org]]

#+begin_info
I recommend using Anaconda or Miniconda. They provide the flexibility to create environments with a specific Python version, even if you don't have that version installed yet. With standard Python, you can only create a virtual environment using a Python version that you already have installed.

Miniconda is simply a stripped-down version of Anaconda. [[https://docs.anaconda.com/getting-started/][Getting Started with
Anaconda]] has some discussion on when to choose one version over the other.

The video tutorial here does not include a Linux installation, nor does it
discuss installing Miniconda.
#+end_info

#+caption: Warning
#+begin_warning
A warning about this video: I did not illustrate how to get a specific version
of Python, so when using ~conda create ...~, please add ~python=3.XX~, where ~xx~ is the appropriate release
number.
#+end_warning

#+begin_export html
<iframe width="560" height="315" src="https://www.youtube.com/embed/0YIpRSXcUJI?si=ZIhi8UJn-TCyarHp" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
#+end_export

*** Anaconda Installation

#+begin_info
I recommend the Anaconda installation over Miniconda and standard Python. In
fact, most or all of the instructions in these tutorials assume you have
installed Anaconda, and you have the Anaconda Navigator included with Anaconda.
#+end_info
**** Mac OS
I'm a Mac user, so I know this one best.

#+begin_info
I recommend using the command-line installation. This has worked best for me in
terms of adding packages.
#+end_info

- From the download page, you can choose "[[https://www.anaconda.com/download#downloads/success][Get additional installers]]"
  - You can use the *Skip registration* link, or you may register your e-mail if
    you wish.
- Get the “Command Line Installer” appropriate for your computer
  - Intel processor: pick “64-Bit (Intel chip) Command Line ...”
  - Apple processor: pick “64-Bit (Apple silicon) Command Line ...”

∗ Follow the Mac [[https://docs.anaconda.com/free/anaconda/install/mac-os/#command-line-install][Command line install]] instructions
**** Windows
You can either install Anaconda/Miniconda natively in Windows, or you can use
[[https://learn.microsoft.com/en-us/windows/wsl/install][WSL]] to install it in Linux on your Windows machine.

For a windows installation:
- Go to the [[https://www.anaconda.com/download#downloads/success][Anaconda download]] page
  - Skip the registration, or register your e-mail as you see fit
**** UNIX/Linux
You are on your own, but I think it should be pretty straight-forward.
*** Miniconda Installation
I do not recommend a Miniconda installation at this time. However, if your
computer is tight on storage, this may be a better option than Anaconda.

#+begin_info
If you're a Windows user, I recommend Anaconda over Miniconda, sinc the Anaconda
Navigator app also includes a PowerShell prompt, where you can use terminal
commands to create enviroments and install packages.
#+end_info
I've never done this yet, but the Miniconda installers are on the [[https://www.anaconda.com/download/success][Anaconda
download]] page. You just have to scroll past the Anaconda installers.

There are [[https://docs.anaconda.com/miniconda/install/][installation instructions]] for Miniconda, with a procedure for
command-line installation.
*** Standard Python Installation
I do not recommend this installation at this time.

Visit the [[https://www.python.org/downloads/][download page]] and get the version of Python you wish to use.

Make sure you get the correct version if you're in one of my courses. Table
[[tab:PyVersion]] is a listing of my courses along with the required Python version.

** Test Your Python Installation
Let us test your Python operationally. A nice way to run Python is in Jupyter
Lab. To run Python, you can do the following
- On a Mac
  - Open a Terminal window
  - type ~jupyter lab~ followed by ~RETURN~ to launch Jupyter Lab
- On a PC
  - Start the Anaconda Navigator
  - Launch Jupyter Lab
- Once you have opened Jupyter Lab, a new web browser will arise with a Jupyter Lab graphical interface
  - You can begin coding once the Jupyter Lab window is open!

If you need help starting Jupyter Lab, please see my video
   #+begin_export html
   <iframe width="560" height="315" src="https://www.youtube.com/embed/dviOML11TqE?si=SMM-LUYWGB0w_mtl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
   #+end_export
*** A Hello World Program
Try using the code of Listing [[lst:helloworld]] as starting code.

#+name: lst:helloworld
#+caption: A "hello world" program is traditionally a beginner's first prgram in any new language.
#+begin_src python :exports both :results output -n
  print('hello world')
#+end_src

- Observations:
  - There is a ~print()~ command with a single argument
  - That argument is a ~string~, which is a sequence of characters
  - You can define a ~string~ by putting the character sequence between a pair
    single quotes (~'some text'~) or double quotes (i.e, ~"some text"~ - chose
    one or the other, but not both to define your ~string~)
  - ~print()~ does one thing: it makes the input ~string~ visible in the Python
    output

*** Python Version Check
- Another check you can perform is to make Python print its version, as shown
  in Listing [[lst:verCheck]]
  - We see that I'm using Python 3, version 3.11.7.
  - The ~#~ character is the beginning of an inline comment
    - The ~#~ character an any subsequent characters in that line of code are
      not evaluated
    - Comments are strictly for the human reader to aid in code understandability
      (very important)
    - Comments clarify code to others and clarify a thought process to oneself
#+name: lst:verCheck
#+caption: This code uses the built-in ~sys~ package to query the Python version.
#+begin_src python :results output :exports both
  import sys # make the sys package available for use
  print(sys.version) # print the version information
#+end_src

#+RESULTS: lst:verCheck
: 3.11.7 (main, Dec 15 2023, 12:09:56) [Clang 14.0.6 ]

* Set Up a Python Environment

** Overview
We will create a Python environment in Conda, and we will equip that environment
with packages which extend its capabilities. This is a video tutorial:

#+begin_note
Please note: please use =pip install ...=, even though this video demonstrates
~conda install ...~.
#+end_note

#+begin_export html
  <iframe width="560" height="315" src="https://www.youtube.com/embed/owtKH9MPrtE?si=o9ZwmcIV1ppoUswo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
#+end_export

The following sections provide detailed instructions for setting up an
enviornment using ~conda~.

** Conda: Create an Environment
To create an environment:

1. Open a terminal application
   1. On Windows, start the Anaconda Navigator and launch the Powershell
      application
   2. On a Mac, open a Terminal (or iTerm2) window
2. In the terminal, type =conda create --name <EnvName> python=3.XX=
   and press RETURN (ENTER) to execue the command
   1. Here, you replace =<EnvName>= the the specific name you choose for
      your environment
   2. Short, simple names will be most effective
3. This creates your environment and specifies that we want to use
   Python 3.XX, where you replace =XX= by the numerical value from Table
   [[tab:PyVersion]]
   1. Newer versions of Python may not work well with Qiskit
4. You can verify that your environment is created by typing
   =conda info --envs=
   1. If the environment appears in the resulting list, you have
      successfully created it
   2. Otherwise, you may need to try again

** Activate your Environment (Conda)
- After creating your environment--especially if this is the first
   environment youve created--it is likely that your base environment
   is active. This means your new environment is _not_ active.
- You can tell this by looking at the start of your prompt string
  - If it says =(base)=, then, then your base environment is active

To activate you environment:
1. Type the following at the Powershell or Terminal
  prompt:
  #+begin_src shell :eval never
    conda activate <EnvName>
  #+end_src

   1. This activates your environment so that you can:
      1. install packages or
      2. use the packages you previously installed in that environment
#+begin_info
You can deactivate your environment by typing =conda deactivate= at
the Powershell/Terminal prompt, but don't do that yet. We need to keep our
environment active so we can extend it by installing packages.
#+end_info

** Installing Packages
We will install the packages you need for this course. The preferred way will be
to use the ~requirements.txt~ file, which installs all the packages I want you
to have. If that fails, we can try the manual method.
*** Install Packages from ~requirements.txt~ (Recommended)

This repository elateive to the

*** Manual Install
If you're here, we may assume your install from ~requirements.txt~ failed, or
you just want to do things the hard(er) way.
- For this course, you must install packages for your new environment
- Here, we will focus on the following:
  - =jupyterlab= - allows for an interactive session in your new
    environment (its installed by default in the =base= environment)

  - =qiskit= - allows you to develop quantum computing circuits

  - =qiskit-aer= - allows you to simulate quantum circuits

  - =matplotlib= - helps you visualize quantum circuits

  - =pylatexenc= - helps you visualize quantum circuits in a nicer
    way than the default

- For a walk-through on the package installation, see my video
  [[https://youtu.be/MQUu_ZwxViA][A Python Environment for Quantum
  Computing]]

  - To install packages in an environment:

    - Open the Powershell or Terminal as needed

    - Activate the desired environment

    - For each package to be installed:

      - First, try typing =conda install <packagename>=

        - When prompted, type =y= + =RETURN=

  - Troubleshooting

    - If =conda install <packagename>= doesnt work (you see a failed to
      resolve the environment, try searching for a specific
      installation command, such as
      =conda install conda-forge::pylatexenc= in the case of
      =pylatexenc=

      - This points example points to an installation on the
        =conda-forge= package collection

    - If =conda install ...= fails despite specifying a package
      collection, try installing with =pip= instead of =conda=


