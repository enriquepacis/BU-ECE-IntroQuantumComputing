# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+title: Quantum Phase Estimation
#+author: Dr. E.P. Blair

* Notebook Setup                                                     :ignore:

** Python Setup                                                   :noexport:

#+begin_src emacs-lisp
  (setq-local org-babel-python-command (expand-file-name "~/Library/CloudStorage/Box-Box/Teaching/GitHub/BU-ECE-IntroQuantumComputing/.direnv/python-3.11/bin/python3"))
#+end_src

#+RESULTS:
:results:
:end:

#+begin_src python :results output :eval never-export
import sys

print(sys.executable)
#+end_src

#+RESULTS:
:results:
/Users/enrique_blair/Library/CloudStorage/Box-Box/Teaching/GitHub/BU-ECE-IntroQuantumComputing/.direnv/python-3.11/bin/python3
:end:


#+begin_src python :results output :session gen-sesh :eval never-export
import sys

print(sys.executable)
#+end_src

#+RESULTS:
:results:
/Users/enrique_blair/Library/CloudStorage/Box-Box/Teaching/GitHub/BU-ECE-IntroQuantumComputing/.direnv/python-3.11/bin/python3
:end:

** Configuration for org export + ignore tag (Start Here)         :noexport:
This provides support for the =:ignore:= tag. It requires the
=ox-extra= package, which I don't know how to install
effectively. I've followed the advice given on StackExchange
([[https://emacs.stackexchange.com/questions/8182/how-to-use-org-plus-contrib][discussion]]). I still can't seem to find the =ox-extra= package.

My solution is to copy the =ox-extra.el= file to the same directory as
this file, and then run the following code block:
#+name: load_local_vars
#+begin_src emacs-lisp :results output :exports both
(add-to-list 'load-path ".")
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

#+RESULTS: load_local_vars
:results:
:end:


Other solutions could be:
1. Manually install =ox-extra=
2. Put =ox-extra= in some location on my computer, and then use the
   =add-to-list=, =require=, and =ox-extras-activate= commands to my
   Emacs initialization file. This may be equivalent to the manual
   installation.
3. Tangle =ox-extra.el= to the file space

#+begin_src lisp :tangle ox-extra.el :eval never :padlines none
;;; ox-extra.el --- Convenience functions for org export

;; Copyright (C) 2014  Aaron Ecay

;; Author: Aaron Ecay <aaronecay@gmail.com>

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file contains some convenience functions for org export, which
;; are not part of org's core.  Call `ox-extras-activate' passing a
;; list of symbols naming extras, which will be installed globally in
;; your org session.
;;
;; For example, you could include the following in your .emacs file:
;;
;;    (require 'ox-extra)
;;    (ox-extras-activate '(latex-header-blocks ignore-headlines))
;;

;; Currently available extras:

;; - `latex-header-blocks' -- allow the use of latex blocks, the
;; contents of which which will be interpreted as #+latex_header lines
;; for export.  These blocks should be tagged with #+header: :header
;; yes.  For example:
;; #+header: :header yes
;; #+begin_export latex
;;   ...
;; #+end_export

;; - `ignore-headlines' -- allow a headline (but not its children) to
;; be ignored.  Any headline tagged with the 'ignore' tag will be
;; ignored (i.e. will not be included in the export), but any child
;; headlines will not be ignored (unless explicitly tagged to be
;; ignored), and will instead have their levels promoted by one.

;; TODO:
;; - add a function to org-mode-hook that looks for a ox-extras local
;;   variable and activates the specified extras buffer-locally
;; - allow specification of desired extras to be activated via
;;   customize

;;; Code:

(require 'ox)
;; The cl package is deprecated. I think we can do without this - EPB
;; (eval-when-compile (require 'cl))

(defun org-latex-header-blocks-filter (backend)
  (when (org-export-derived-backend-p backend 'latex)
    (let ((positions
	   (org-element-map (org-element-parse-buffer 'greater-element nil) 'export-block
	     (lambda (block)
	       (when (and (string= (org-element-property :type block) "LATEX")
			  (string= (org-export-read-attribute
				    :header block :header)
				   "yes"))
		 (list (org-element-property :begin block)
		       (org-element-property :end block)
		       (org-element-property :post-affiliated block)))))))
      (mapc (lambda (pos)
	      (goto-char (nth 2 pos))
	      (destructuring-bind
		  (beg end &rest ignore)
		  (org-edit-src-find-region-and-lang)
		(let ((contents-lines (split-string
				       (buffer-substring-no-properties beg end)
				       "\n")))
		  (delete-region (nth 0 pos) (nth 1 pos))
		  (dolist (line contents-lines)
		    (insert (concat "#+latex_header: "
				    (replace-regexp-in-string "\\` *" "" line)
				    "\n"))))))
	    ;; go in reverse, to avoid wrecking the numeric positions
	    ;; earlier in the file
	    (reverse positions)))))


;; During export headlines which have the "ignore" tag are removed
;; from the parse tree.  Their contents are retained (leading to a
;; possibly invalid parse tree, which nevertheless appears to function
;; correctly with most export backends) all children headlines are
;; retained and are promoted to the level of the ignored parent
;; headline.
;;
;; This makes it possible to add structure to the original Org-mode
;; document which does not effect the exported version, such as in the
;; following examples.
;;
;; Wrapping an abstract in a headline
;;
;;     * Abstract                        :ignore:
;;     #+LaTeX: \begin{abstract}
;;     #+HTML: <div id="abstract">
;;
;;     ...
;;
;;     #+HTML: </div>
;;     #+LaTeX: \end{abstract}
;;
;; Placing References under a headline (using ox-bibtex in contrib)
;;
;;     * References                     :ignore:
;;     #+BIBLIOGRAPHY: dissertation plain
;;
;; Inserting an appendix for LaTeX using the appendix package.
;;
;;     * Appendix                       :ignore:
;;     #+LaTeX: \begin{appendices}
;;     ** Reproduction
;;     ...
;;     ** Definitions
;;     #+LaTeX: \end{appendices}
;;
(defun org-export-ignore-headlines (data backend info)
  "Remove headlines tagged \"ignore\" retaining contents and promoting children.
Each headline tagged \"ignore\" will be removed retaining its
contents and promoting any children headlines to the level of the
parent."
  (org-element-map data 'headline
    (lambda (object)
      (when (member "ignore" (org-element-property :tags object))
        (let ((level-top (org-element-property :level object))
              level-diff)
          (mapc (lambda (el)
                  ;; recursively promote all nested headlines
                  (org-element-map el 'headline
                    (lambda (el)
                      (when (equal 'headline (org-element-type el))
                        (unless level-diff
                          (setq level-diff (- (org-element-property :level el)
                                              level-top)))
                        (org-element-put-property el
                          :level (- (org-element-property :level el)
                                    level-diff)))))
                  ;; insert back into parse tree
                  (org-element-insert-before el object))
                (org-element-contents object)))
        (org-element-extract-element object)))
    info nil)
  data)

(defconst ox-extras
  '((latex-header-blocks org-latex-header-blocks-filter org-export-before-parsing-hook)
    (ignore-headlines org-export-ignore-headlines org-export-filter-parse-tree-functions))
  "A list of org export extras that can be enabled.

Should be a list of items of the form (NAME FN HOOK).  NAME is a
symbol, which can be passed to `ox-extras-activate'.  FN is a
function which will be added to HOOK.")

(defun ox-extras-activate (extras)
  "Activate certain org export extras.

EXTRAS should be a list of extras (defined in `ox-extras') which
should be activated."
  (dolist (extra extras)
    (let* ((lst (assq extra ox-extras))
	   (fn (nth 1 lst))
	   (hook (nth 2 lst)))
      (when (and fn hook)
	(add-hook hook fn)))))

(defun ox-extras-deactivate (extras)
  "Deactivate certain org export extras.

This function is the opposite of `ox-extras-activate'.  EXTRAS
should be a list of extras (defined in `ox-extras') which should
be activated."
  (dolist (extra extras)
    (let* ((lst (assq extra ox-extras))
	   (fn (nth 1 lst))
	   (hook (nth 2 lst)))
      (when (and fn hook)
	(remove-hook hook fn)))))

(provide 'ox-extra)
;;; ox-extra.el ends here
#+end_src

** LaTeX Setup                                                     :noexport:
#+STARTUP: overview indent
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+latex_header: \usepackage{subfig}
#+LATEX_HEADER: \usepackage{braket}
#+latex_header: \usepackage{cite}
#+latex_header: \usepackage{graphicx}
#+latex_header: \usepackage[font=small, labelfont=bf]{caption}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}

#+begin_comment
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage{braket}
#+LATEX_HEADER: \usepackage{floatrow}
#+latex_header: \usepackage{wrapfig}
#+OPTIONS: H:3 creator:nil timestamp:nil skip:nil toc:nil num:t ^:nil ~:~
#+OPTIONS: author:nil title:nil date:nil
#+TAGS: noexport(n) deprecated(d) ignore(i)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport, ignore
#+LATEX_CLASS: article

#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage{graphicx,color}
#+LATEX_HEADER: \usepackage{amsmath, braket}
#+LATEX_HEADER: \usepackage{cite}
#+LATEX_HEADER: \usepackage[version=3]{mhchem}
#+LATEX_HEADER: \usepackage{chemformula}


#+latex_header: \usepackage{caption}
#+latex_header: \usepackage{subcaption}

#+latex_header: \usepackage[font=small, bf]{caption}
#+latex_header: \newcommand{\Argum}[1]{\ensuremath{\! \left( #1 \right)}}
#+latex_header: \newcommand{\MyPar}[1]{\ensuremath{\left( #1 \right)}}
#+latex_header: \newcommand{\Norm}[1]{\ensuremath{\! \left\| #1 \right\|}}
#+latex_header: \newcommand{\mc}[1]{\ensuremath{\mathcal{ #1 }}}  % My shorthand \mathcal{} command
#+latex_header: \newcommand{\TextSub}[1]{\ensuremath{_{\mbox{\tiny{#1}}} } }  % Tiny text subscript
#+latex_header: \newcommand{\TextSup}[1]{\ensuremath{^{\mbox{\tiny{#1}}} } }  % Tiny text superscript
#+latex_header: \DeclareMathOperator{\Tr}{Tr}
#+latex_header: \newcommand{\EmphItUl}[1]{\ul{\textit{#1}}}
#+latex_header: \newcommand{\EmphItBf}[1]{\textbf{\textit{#1}}}
#+end_comment

#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \setminted{fontsize=\small, breaklines=true, frame=lines, bgcolor=lightgray, numbersep=5pt, autogobble, linenos}
#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: ':nil
#+PROPERTY: header-args :exports both

* Example
This example follows the [[https://pennylane.ai/qml/demos/tutorial_qpe][Pennylane QPE tutorial]].

The example operator for which we try to estimate the phase is
$$\mathbf{U} = \mathbf{R}_{\phi}(2\pi/5)$$
We apply it to an eigenstate $\left|1\right\rangle$, which has phase $\theta=1/5$.


** PennyLane Example

#+begin_src python :results output :session "pl-qpe" :eval never-export
  import pennylane as qml
  import numpy as np

  def U(wires):
      return qml.PhaseShift(2 * np.pi / 5, wires=wires)

#+end_src

#+RESULTS:
:results:
:end:


#+begin_src python :results output :session "pl-qpe" :eval never-export
  dev = qml.device("default.qubit")

  @qml.qnode(dev)
  def circuit_qpe(estimation_wires):
      # initialize to state |1>
      qml.PauliX(wires=0)

      for wire in estimation_wires:
          qml.Hadamard(wires=wire)

      qml.ControlledSequence(U(wires=0), control=estimation_wires)

      qml.adjoint(qml.QFT)(wires=estimation_wires)

      return qml.probs(wires=estimation_wires)

#+end_src

#+RESULTS:
:results:
:end:


#+begin_src python :results output :session "pl-qpe" :eval never-export
  import matplotlib.pyplot as plt

  estimation_wires = range(1, 5)

  results = circuit_qpe(estimation_wires)

  bit_strings = [f"0.{x:0{len(estimation_wires)}b}" for x in range(len(results))]

  # Visualize the results
  plt.close("all")
  plt.bar(bit_strings, results)
  plt.xlabel("phase")
  plt.ylabel("probability")
  plt.xticks(rotation="vertical")
  plt.subplots_adjust(bottom=0.3)

  from pathlib import Path
  Path('img').mkdir(parents=True, exist_ok=True)

  import os
  fname = os.path.join('img', 'test_qpe_pl.png')
  plt.savefig( fname )

  print(f'\n[[./{fname}]]')

#+end_src

#+RESULTS:
:results:

[[./img/test_qpe_pl.png]]
:end:



** Qiskit Example

This follows a third-party [[https://quantumcomputinguk.org/tutorials/quantum-phase-estimation-with-code][tutorial]] as well as an old Qiskit
textbook [[https://github.com/qiskit-community/qiskit-textbook/blob/main/content/ch-algorithms/quantum-phase-estimation.ipynb][tutorial]]

  
#+begin_src python :results output  :session "qpe" :eval never-export
  from qiskit_aer import AerSimulator
  from qiskit.visualization import plot_histogram, plot_state_city
  import qiskit.quantum_info as qi
  from qiskit import transpile

  import sys
  print(sys.executable)
  #print(qi)
#+end_src

#+RESULTS:
:results:
/Users/enrique_blair/Library/CloudStorage/Box-Box/Teaching/GitHub/BU-ECE-IntroQuantumComputing/.direnv/python-3.11/bin/python3
:end:

#+begin_src python :results output :session "qpe" :eval never-export
  from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister
  # from qiskit.circuit.library import QFT
  import numpy as np
  import os

  def qft_dagger(qc, n):
      """Appends an n-qubit QFTdagger the first n qubits in circ.

      Ref.: [1]  https://github.com/qiskit-community/qiskit-textbook/blob/main/content/ch-algorithms/quantum-phase-estimation.ipynb
      """

      # Don't forget the Swaps!
      for qubit in range(n//2):
          qc.swap(qubit, n-qubit-1)
      for j in range(n):
          for m in range(j):
              qc.cp(-np.pi/float(2**(j-m)), m, j)
          qc.h(j)


  N = 3 # number of estimation qubits

  phi = 2*np.pi/3  # angle
  theta = phi/(2*np.pi) # phase

  # N qubits are for estimation
  # The last qubit is the target
  q = QuantumRegister( N + 1, 'q' )
  c = ClassicalRegister( N, 'c' )

  qc = QuantumCircuit(q, c)

  # Apply H to each bit in the estimation register
  for k in range(N):
      qc.h( q[k] )

    # set the target bit to 1
  qc.x( q[N] )

  qc.barrier()

  # Apply controlled H to each bit in the estimation register
  for k in range(N):
      for n in range(2**k):
          qc.cp( phi, q[k], q[N] )

  qc.barrier()

  # Inverse QFT

  qft_dagger(qc, N)

  qc.barrier()

  # Measurement

  # Add measurement gates on estimation register
  for k in range(N):
      qc.measure(k, k)

  cktfile = os.path.join('img','ckt_qpe_qiskit.png')

  qc.draw(output='mpl',style='clifford',
        filename=cktfile)

  print(f'\n[[./{cktfile}]]')

  print('QPE Circuit constructed.')
#+end_src

#+RESULTS:
:results:

[[./img/ckt_qpe_qiskit.png]]
QPE Circuit constructed.
:end:

[[./img/ckt_qpe_qiskit.png]]


#+begin_src python :results output :session "qpe" :eval never-export
  # Transpile for simulator
  simulator = AerSimulator()
  qc_trans = transpile(qc, simulator)

  cktfile = os.path.join('img','ckt_qpe_qiskit_trans.png')

  qc_trans.draw(output='mpl',style='clifford',
                filename=cktfile)

  print(f'\n[[./{cktfile}]]')

#+end_src

#+RESULTS:
:results:

[[./img/ckt_qpe_qiskit_trans.png]]
:end:


#+begin_src python :results output :session "qpe" :eval never-export
  # Run and get counts
  result = simulator.run(qc_trans).result()
  counts = result.get_counts(qc_trans)

  fname = os.path.join('img', 'qpe_meas_qiskit.jpg')
  plot_histogram(counts, title='Bell-State counts',
                 filename=fname)

  print(f'\n[[./{fname}]]')

#+end_src

#+RESULTS:
:results:

[[./img/qpe_meas_qiskit.jpg]]
:end:

This is a first use of the esimator
#+begin_src python :results output :eval never-export
  from qiskit import transpile
  from qiskit.circuit.library import RealAmplitudes
  from qiskit.quantum_info import SparsePauliOp
  from qiskit_aer import AerSimulator

  import os
  
  sim = AerSimulator()
  # --------------------------
  # Simulating using estimator
  #---------------------------
  from qiskit_aer.primitives import EstimatorV2

  psi1 = transpile(RealAmplitudes(num_qubits=2, reps=2), sim, optimization_level=0)
  psi2 = transpile(RealAmplitudes(num_qubits=2, reps=3), sim, optimization_level=0)

  H1 = SparsePauliOp.from_list([("II", 1), ("IZ", 2), ("XI", 3)])
  H2 = SparsePauliOp.from_list([("IZ", 1)])
  H3 = SparsePauliOp.from_list([("ZI", 1), ("ZZ", 1)])

  theta1 = [0, 1, 1, 2, 3, 5]
  theta2 = [0, 1, 1, 2, 3, 5, 8, 13]
  theta3 = [1, 2, 3, 4, 5, 6]

  estimator = EstimatorV2()

  # calculate [ [<psi1(theta1)|H1|psi1(theta1)>,
  #              <psi1(theta3)|H3|psi1(theta3)>],
  #             [<psi2(theta2)|H2|psi2(theta2)>] ]
  job = estimator.run(
      [
          (psi1, [H1, H3], [theta1, theta3]),
          (psi2, H2, theta2)
      ],
      precision=0.01
  )
  result = job.result()
  print(f"expectation values : psi1 = {result[0].data.evs}, psi2 = {result[1].data.evs}")

  # --------------------------
  # Simulating using sampler
  # --------------------------
  from qiskit_aer.primitives import SamplerV2
  from qiskit import QuantumCircuit

  # create a Bell circuit
  bell = QuantumCircuit(2)
  bell.h(0)
  bell.cx(0, 1)
  bell.measure_all()

  # create two parameterized circuits
  pqc = RealAmplitudes(num_qubits=2, reps=2)
  pqc.measure_all()
  pqc = transpile(pqc, sim, optimization_level=0)
  pqc2 = RealAmplitudes(num_qubits=2, reps=3)
  pqc2.measure_all()
  pqc2 = transpile(pqc2, sim, optimization_level=0)

  theta1 = [0, 1, 1, 2, 3, 5]
  theta2 = [0, 1, 2, 3, 4, 5, 6, 7]

  # initialization of the sampler
  sampler = SamplerV2()

  # collect 128 shots from the Bell circuit
  job = sampler.run([bell], shots=128)
  job_result = job.result()
  print(f"counts for Bell circuit : {job_result[0].data.meas.get_counts()}")
   
  # run a sampler job on the parameterized circuits
  job2 = sampler.run([(pqc, theta1), (pqc2, theta2)])
  job_result = job2.result()
  print(f"counts for parameterized circuit : {job_result[0].data.meas.get_counts()}")

  # --------------------------------------------------
  # Simulating with noise model from actual hardware
  # --------------------------------------------------
  # from qiskit_ibm_runtime import QiskitRuntimeService
  # provider = QiskitRuntimeService(channel='ibm_quantum', token="set your own token here")
  # backend = provider.get_backend("ibm_kyoto")

  # create sampler from the actual backend
  # sampler = SamplerV2.from_backend(backend)

  # run a sampler job on the parameterized circuits with noise model of the actual hardware
  # bell_t = transpile(bell, AerSimulator(basis_gates=["ecr", "id", "rz", "sx"]), optimization_level=0)
  # job3 = sampler.run([bell_t], shots=128)
  # job_result = job3.result()
  # print(f"counts for Bell circuit w/noise: {job_result[0].data.meas.get_counts()}")

  from qiskit.visualization import plot_histogram

  fname = os.path.join('img', 'sample_estimate_tutorial.png')

  plot_histogram(job_result[0].data.meas.get_counts(),
                 filename=fname)

  print(f'\n[[./{fname}]]')
#+end_src

#+RESULTS:
:results:
expectation values : psi1 = [ 1.55268149 -1.09812529], psi2 = 0.18137235564574697
counts for Bell circuit : {'00': 70, '11': 58}
counts for parameterized circuit : {'11': 426, '00': 133, '01': 349, '10': 116}

[[./img/sample_estimate_tutorial.png]]
:end:


#+begin_src python :results output :session temp-sample-estimate :eval never-export
  from qiskit.visualization import plot_histogram

  fname = os.path.join('img', 'sample_estimate_tutorial.png')

  plot_histogram(job_result[0].data.meas.get_counts(),
                 filename=fname)

  print(f'\n[[./{fname}]]')
#+end_src

#+RESULTS:
:results:
:end:
